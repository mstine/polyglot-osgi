def dir = [:]
dir.src = new File('.', 'src')
dir.work = new File('.', 'working')
dir.classes = new File(dir.work, 'classes')
dir.lib = new File('.', 'lib')

def types = [
	'main', 'java', 'shared'
]
types.each {
	dir["${it}Src"] = new File(dir.src, it)
	dir["${it}Classes"] = new File(dir.classes, it)
	dir["${it}Lib"] = new File(dir.lib, it)
}

dir.osgiLib = new File(dir.lib, 'osgi')
dir.osgiImpl = new File(dir.osgiLib, 'felix/felix-1.8.0/bin')
dir.osgiWork = new File(dir.osgiImpl, '..')
dir.impls = new File(dir.work, 'impls')

dir.each { k,v -> dir[k] = v.canonicalPath }

def file = [:]

file.osgiJar = new File(dir.osgiImpl, 'felix.jar')

file.each { k,v -> file[k] = v.canonicalPath }

includeTargets << gant.targets.Clean
cleanDirectory << dir.work
cleanDirectory << 'felix-cache'

target(run:"Runs the driver") {
	depends(init,compileDriver)
	java(classname:"eg.Driver", fork:true) {
		classpath {
			['sharedClasses', 'mainClasses'].each {
				pathelement(location:dir[it])
			}
			['osgiLib', 'impls', 'mainLib'].each {
				fileset(dir:dir[it], includes:'**/*.jar')
			}
		}
	}
}

target(compileShared: 'Compiles the shared code (interface)') {
	depends(init)
	javac(srcDir:dir.sharedSrc, destDir:dir.sharedClasses) {
		classpath {
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
	}
}

target(compileDriver: 'Compiles the driver') {
	depends(init, compileShared)
	javac(srcdir:dir.mainSrc, destDir:dir.mainClasses) {
		classpath {
			pathelement(location:dir.sharedClasses)
			['osgi', 'main',].each {
				fileset(dir:dir["${it}Lib"], includes:'**/*.jar')
			}
		}
	}
}

target(init: 'Initializes the build') {
	dir.each { k,v ->
		mkdir(dir:v)
	}
}

setDefaultTarget(run)
