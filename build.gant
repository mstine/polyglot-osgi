def types = [
	'main', 
	'java', 'groovy17', 'groovy16',
	'clojure', 'scala', 'jruby'
]

def dir = [:]
dir.src = new File('.', 'src')
dir.work = new File('.', 'working')
dir.classes = new File(dir.work, 'classes')
dir.lib = new File('.', 'lib')
types.each {
	dir["${it}Src"] = new File(dir.src, it)
	dir["${it}Classes"] = new File(dir.classes, it)
	dir["${it}Lib"] = new File(dir.lib, it)
}
dir.supportBundles = new File(dir.work, 'support')
dir.osgiLib = new File(dir.lib, 'osgi')
dir.osgiImpl = new File(dir.osgiLib, 'felix/felix-1.8.0/bin')
dir.osgiWork = new File(dir.osgiImpl, '..')
dir.impls = new File(dir.work, 'impls')
dir.each { k,v -> dir[k] = v.canonicalPath }

def file = [:]
file.osgiJar = new File(dir.osgiImpl, 'felix.jar')
types.each {
	file["${it}ImplJar"] = new File(dir.impls, "$it-impl.jar")
	file["${it}Bnd"] = new File(dir["${it}Src"], "${it}.bnd")
}
file.bndIvy = new File('.', 'ivy-bnd.xml')
file.each { k,v -> file[k] = v.canonicalPath }

includeTargets << gant.targets.Clean
cleanDirectory << dir.work
cleanDirectory << 'felix-cache'

includeTool << gant.tools.Ivy

ant.taskdef(name:'clojureCompile', classname:'com.ubermensch.ant.clojure.CompileTask') {
	classpath {
		fileset(dir:dir.clojureLib, includes:'*.jar')
	}
}

ant.taskdef(resource:"scala/tools/ant/antlib.xml") {
	classpath {
		fileset(dir:dir.scalaLib, includes:'*.jar')
	}
}

types.findAll { it.startsWith("groovy") }.each { version ->
	ant.taskdef(name:"${version}c", classname:'org.codehaus.groovy.ant.Groovyc') {
		classpath {
			fileset(dir:dir["${version}Lib"], includes:'groovy*.jar')
		}
	}
}

// Until JRuby has a true compiler
ant.taskdef(name:"jrubyc", classname:'org.codehaus.groovy.ant.Groovyc') {
	classpath {
		fileset(dir:dir.groovy17Lib, includes:'groovy*.jar')
	}
}

target(run:"Runs the driver") {
	clean()
	init()
	compileMain()
	compileImpls()
	ant.java(classname:"eg.Driver", fork:true) {
		classpath {
			pathelement(location:dir.mainClasses)
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
		new File(dir.supportBundles).eachFileRecurse {
			if(it.name.endsWith(".jar")) {
				arg(value:it.canonicalPath)
			}
		}
		new File(dir.impls).eachFileRecurse {
			if(it.name.endsWith(".jar")) {
				arg(value:it.canonicalPath)
			}
		}
	}
}

target(compileImpls: 'Compiles all the implementations') {
	depends(init)
	depends(compileJava)
	depends(compileGroovy16)
	depends(compileGroovy17)
	//depends(compileClojure)
	//depends(compileJRuby)
}

def packageTemplate = { kind ->
	def srcDir = dir["${kind}Src"]
	def clsDir = dir["${kind}Classes"]

	ant."${kind}c"(srcDir:srcDir, destDir:clsDir) {
		classpath {
			fileset(dir:dir["${kind}Lib"], includes:'**/*.jar')
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
			pathelement(location:dir.mainClasses)
		}
	}

	def bndFile = new File(file["${kind}Bnd"])
	if(!bndFile.exists()) {
		bndFile.withWriter { w ->
			w << """
Export-Package: eg.impl.$kind
Import-Package: *
Bundle-Activator: eg.impl.${kind}.${kind[0].toUpperCase()}${kind[1,-1]}HelloWorldBundle
""".trim()
		}
	}

	ant.bnd(classpath:clsDir, eclipse:false, exceptions:false, failok:false, files:file["${kind}Bnd"])

	ant.move(file:"${kind}.jar", toFile:file["${kind}ImplJar"], verbose:true)

}

target(compileJRuby: 'Compiles the JRuby implementation') {
	if(System.properties['java.version'].startsWith("1.5")) {
		fail(message:"JRuby uses scripting framework, which was introduced in 1.6", status:15)
	}
	depends(init, compileMain)
	packageTemplate('jruby')
	copy(toDir:dir.supportBundles) {
		fileset(dir:dir.jrubyLib, includes:'jruby-complete*.jar') 
	}
}

target(compileClojure: 'Compiles the Clojure implementation') {
	depends(init, compileMain)
	clojureCompile {
		classpath {
			pathelement(location:dir.clojureSrc)
			pathelement(location:dir.clojureClasses)
			pathelement(location:dir.mainClasses)
		}
		namespace('eg.impl.clojure.ClojureHelloWorld')
		namespace('eg.impl.clojure.ClojureHelloWorldBundle')
	}
}

target(compileJava: 'Compiles the Java implementation') {
	depends(init, compileMain)
	packageTemplate('java')
}

target(compileGroovy17: 'Compiles the Groovy 1.7 implementation') {
	depends(init, compileMain)
	packageTemplate('groovy17') 
	copy(toDir:dir.supportBundles) {
		fileset(dir:dir.groovy17Lib, includes:'groovy*1.7*.jar') 
	}
}

target(compileGroovy16: 'Compiles the Groovy 1.6 implementation') {
	depends(init, compileMain)
	packageTemplate('groovy16')
	copy(toDir:dir.supportBundles) {
		fileset(dir:dir.groovy16Lib, includes:'groovy*1.6*.jar') 
	}
}

target(compileMain: 'Compiles the main code (driver, api)') {
	depends(init)
	javac(
		srcdir:dir.mainSrc, destDir:dir.mainClasses, 
		debug:true, debugLevel:'source,lines,vars'
	) {
		classpath {
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
	}
}

target(init: 'Initializes the build') {
	dir.each { k,v ->
		mkdir(dir:v)
	}

	// Fetch and install bnd
	ivy.settings(id:'bnd.settings', file:file.bndIvy)
	ivy.cachepath(pathId:'bnd.path', inline:true, organisation:'aQute', module:'bnd', keep:true, settingsRef:'bnd.settings')
	ant.taskdef(resource:"aQute/bnd/ant/taskdef.properties", classpathRef:'bnd.path')
}

setDefaultTarget(run)
