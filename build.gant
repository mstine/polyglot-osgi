def types = [
	'main', 'shared', 
	'java', 'scala', 'jruby',
	'groovy17', 'groovy16'
]

def dir = [:]
dir.src = new File('.', 'src')
dir.work = new File('.', 'working')
dir.classes = new File(dir.work, 'classes')
dir.lib = new File('.', 'lib')
types.each {
	dir["${it}Src"] = new File(dir.src, it)
	dir["${it}Classes"] = new File(dir.classes, it)
	dir["${it}Lib"] = new File(dir.lib, it)
}
dir.osgiLib = new File(dir.lib, 'osgi')
dir.osgiImpl = new File(dir.osgiLib, 'felix/felix-1.8.0/bin')
dir.osgiWork = new File(dir.osgiImpl, '..')
dir.impls = new File(dir.work, 'impls')
dir.each { k,v -> dir[k] = v.canonicalPath }

def file = [:]
file.osgiJar = new File(dir.osgiImpl, 'felix.jar')
types.each {
	file["${it}ImplJar"] = new File(dir.impls, "$it-impl.jar")
}
file.sharedManifest = new File(dir.sharedSrc, 'MANIFEST.MF')
file.sharedImplJar = new File(dir.work, 'api.jar') // Overwrite: shouldn't be in impl dir
file.each { k,v -> file[k] = v.canonicalPath }

includeTargets << gant.targets.Clean
cleanDirectory << dir.work
cleanDirectory << 'felix-cache'

target(initScala: "Steps to initialize Scala") {
	ant.taskdef(resource:"scala/tools/ant/antlib.xml") {
		classpath {
			fileset(dir:dir.scalaLib, includes:'**/*.jar')
		}
	}
}

def initGroovy = { version ->
	ant.taskdef(name:"${version}c", classname:'org.codehaus.groovy.ant.Groovyc') {
		classpath {
			fileset(dir:dir["${version}Lib"], includes:'**/*.jar')
		}
	}
}

target(run:"Runs the driver") {
	depends(init, compileDriver, compileShared, compileImpls)
	java(classname:"eg.Driver", fork:true) {
		classpath {
			pathelement(location:dir.mainClasses)
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
		arg(value:file.sharedImplJar)
		new File(dir.impls).listFiles().each {
			if(it.name.endsWith(".jar")) {
				arg(value:it.canonicalPath)
			}
		}
	}
}

target(compileImpls: 'Compiles all the implementations') {
	depends(init)
	depends(compileJava)
}

def packageTemplate = { kind ->
	ant."${kind}c"(srcDir:dir["${kind}Src"], destDir:dir["${kind}Classes"]) {
		classpath {
			pathelement(location:file.sharedImplJar)
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
	}

	def cp = ['.'] + (new File(dir["${kind}Lib"]).listFiles() ?: [])
	def activatorClassName = kind[0].toUpperCase() + kind[1..-1] + "HelloWorldBundle"

	def implJar = file["${kind}ImplJar"]
	ant.delete(file:implJar, failOnError:false)
	ant.jar(
		destFile:implJar, 
		whenManifestOnly:'fail', compress:true, level:9, index:true
	) {
		fileset(dir:dir["${kind}Classes"])
		fileset(dir:dir["${kind}Lib"], includes:'**/*.jar')
		manifest {
			[
				'Bundle-ManifestVersion': '2',
				'Bundle-SymbolicName': "eg.impl.${kind}",
				'Bundle-Vendor': 'Smokejumper IT Consulting',
				'Bundle-Version': '1',
				'Bundle-Activator': "eg.impl.${kind}.${activatorClassName}",
				'Bundle-Classpath': cp.join(','),
				'Import-Package': 'org.osgi.framework, eg.api, eg.api.osgi.helpers',
				'Export-Package': "eg.impl.$kind"
			].each { k,v -> 
				attribute(name:k, value:v) 
			}
		}
	}
}

target(compileJava: 'Compiles the Java implementation') {
	depends(init, compileShared)
	packageTemplate('java')
}

target(compileGroovy17: 'Compiles the Groovy 1.7 implementation') {
	depends(init, compileShared)
	doInitGroovy('groovy17')
	packageTemplate('groovy17')
}

target(compileGroovy16: 'Compiles the Groovy 1.6 implementation') {
	depends(init, compileShared)
	doInitGroovy('groovy16')
	packageTemplate('groovy16')
}

/*
target(compileJava: 'Compiles the Java implementation') {
	javac(srcDir:dir.javaSrc, destDir:dir.javaClasses) {
		classpath {
			['java', 'shared'].each {
				pathelement(location:dir["${it}Classes"])
			}
			fileset(dir:dir.osgiLib, includes:** /*.jar')
		}
	}
	delete(file:file.javaImplJar, failOnError:false)
	jar(
		destFile:file.javaImplJar, 
		manifest:file.javaManifest, whenmanifestonly:'fail', 
		compress:true, level:9, index:true
	) {
		fileset(dir:dir.javaClasses)
	}
}
*/

target(compileShared: 'Compiles the shared code (interface)') {
	depends(init)
	javac(srcDir:dir.sharedSrc, destDir:dir.sharedClasses) {
		classpath {
			fileset(dir:dir.osgiLib, includes:'**/*.jar')
		}
	}
	jar(
		destFile:file.sharedImplJar, manifest:file.sharedManifest, 
		whenmanifestonly:'fail', compress:true, level:9, index:true
	) {
		fileset(dir:dir.sharedClasses)
	}
}

target(compileDriver: 'Compiles the driver') {
	depends(init, compileShared)
	javac(srcdir:dir.mainSrc, destDir:dir.mainClasses) {
		classpath {
			pathelement(location:dir.sharedClasses)
			['osgi', 'main',].each {
				fileset(dir:dir["${it}Lib"], includes:'**/*.jar')
			}
		}
	}
}

target(init: 'Initializes the build') {
	dir.each { k,v ->
		mkdir(dir:v)
	}
	
}

setDefaultTarget(run)
